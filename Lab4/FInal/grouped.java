/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package statisticsintegration;

import java.util.ArrayList;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author Danielle98
 */
public class grouped extends javax.swing.JFrame {

    /**
     * Creates new form grouped
     */
    
    
    String titlefn;
    int size;
    boolean indi = true;
    int type = 0;
    ArrayList upper = new ArrayList();
    ArrayList lower = new ArrayList();
    ArrayList frequency = new ArrayList();
    ArrayList MD = new ArrayList();
    ArrayList FX = new ArrayList();
    ArrayList FX2 = new ArrayList();
    Mean meany = new Mean();
    Median mediany = new Median();
    Mode modey = new Mode();
    Midpoint md = new Midpoint();
    
    public grouped() {
        initComponents();
        freq.setEnabled(false);
        uc.setEnabled(false);
        lc.setEnabled(false);
        Size.setEnabled(false);
        ok.setEnabled(false);
        ok1.setEnabled(false);
        mm.setEnabled(false);
        mmm.setEnabled(false);
        mmmm.setEnabled(false);
        mmmmm.setEnabled(false);
        median.setEnabled(false);
        mean.setEnabled(false);
        mode.setEnabled(false);
        variance.setEnabled(false);
        standarddev.setEnabled(false);
        range.setEnabled(false);
        dd.setEnabled(false);
        choice.setEnabled(false);
        modess.setEnabled(false);
        intervals.setEnabled(false);
        okk.setEnabled(false);
        edit.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back = new javax.swing.JButton();
        mmm = new javax.swing.JCheckBox();
        mmmm = new javax.swing.JCheckBox();
        dd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        mmmmm = new javax.swing.JCheckBox();
        Size = new javax.swing.JTextField();
        choice = new javax.swing.JComboBox<>();
        ok = new javax.swing.JButton();
        freq = new javax.swing.JTextField();
        title = new javax.swing.JTextField();
        mean = new javax.swing.JTextField();
        median = new javax.swing.JTextField();
        mode = new javax.swing.JTextField();
        variance = new javax.swing.JTextField();
        standarddev = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        range = new javax.swing.JTextField();
        mm = new javax.swing.JCheckBox();
        uc = new javax.swing.JTextField();
        lc = new javax.swing.JTextField();
        ok1 = new javax.swing.JButton();
        okk = new javax.swing.JButton();
        intervals = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        modess = new javax.swing.JTextArea();
        edit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        mmm.setText("Median");

        mmmm.setText("Mode");

        dd.setText("Display Data");
        dd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddActionPerformed(evt);
            }
        });

        jLabel2.setText("Mean:");

        jLabel3.setText("Median:");

        jLabel4.setText("Variance:");

        jLabel5.setText("Mode:");

        jLabel6.setText("Range:");

        jLabel7.setText("Standard Deviaion:");

        mmmmm.setText("All Measures");

        Size.setText("Size");

        choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Integer", "Floating" }));

        ok.setText("OK");
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        freq.setText("Frequency");
        freq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freqActionPerformed(evt);
            }
        });

        title.setText("Title");
        title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleActionPerformed(evt);
            }
        });

        jLabel1.setText("Measures of Central Tendency");

        mm.setText("Mean");
        mm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mmActionPerformed(evt);
            }
        });

        uc.setText("Upper Class Limit");
        uc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ucActionPerformed(evt);
            }
        });

        lc.setText("Lower Class Limit");
        lc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lcActionPerformed(evt);
            }
        });

        ok1.setText("OK");
        ok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok1ActionPerformed(evt);
            }
        });

        okk.setText("OK");
        okk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okkActionPerformed(evt);
            }
        });

        intervals.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Upper Range", "Lower Range", "Both" }));

        modess.setColumns(20);
        modess.setRows(5);
        jScrollPane1.setViewportView(modess);

        edit.setText("Edit Data");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(back))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Size, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ok1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(uc, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(68, 68, 68)
                                            .addComponent(jLabel1))
                                        .addComponent(title, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                                    .addComponent(freq, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(intervals, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(okk)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(dd)
                                .addGap(18, 18, 18)
                                .addComponent(edit)))))
                .addContainerGap(174, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(mm)
                        .addGap(30, 30, 30)
                        .addComponent(mmm)
                        .addGap(36, 36, 36)
                        .addComponent(mmmm)
                        .addGap(21, 21, 21)
                        .addComponent(mmmmm)
                        .addGap(18, 18, 18)
                        .addComponent(ok))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(44, 44, 44)
                                .addComponent(mean, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(34, 34, 34)
                                .addComponent(median, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(mode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))))
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(70, 70, 70)
                                .addComponent(variance, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(85, 85, 85)
                                    .addComponent(range, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(18, 18, 18)
                                    .addComponent(standarddev, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Size, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ok1))
                .addGap(20, 20, 20)
                .addComponent(uc, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lc, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(freq, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intervals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okk))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dd)
                    .addComponent(edit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mm)
                    .addComponent(mmm)
                    .addComponent(mmmm)
                    .addComponent(ok)
                    .addComponent(mmmmm))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(variance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standarddev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(median, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(range, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        this.setVisible(false);
        new CentralTendency().setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void ddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddActionPerformed
        DisplayTwo dis = new DisplayTwo();
        System.out.print("\n\n**"+frequency+"\n\n==");
         if(((String)intervals.getSelectedItem()).equals("None")){
            dis.disp(upper,lower,frequency,MD,FX,FX2);
         } else {
            dis.disp2(upper,lower,frequency,MD,FX,FX2);
         }
        dis.setVisible(true); 
    }//GEN-LAST:event_ddActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
    modess.setText("");
    
   if(((String)intervals.getSelectedItem()).equals("None")){
         if(mm.isSelected() && !mmm.isSelected() && !mmmm.isSelected() && !mmmmm.isSelected()){
           
           mean.setEnabled(true);
           variance.setEnabled(true);
           standarddev.setEnabled(true);
           mean.setText(meany.meanGrouped(FX, frequency)+"");
           variance.setText(meany.gVar(frequency, FX, FX2)+"");
           standarddev.setText(meany.gStandardDev(frequency, FX, FX2)+"");
           
        }
     
        if(!mm.isSelected() && mmm.isSelected() && !mmmm.isSelected() && !mmmmm.isSelected()){
           median.setEnabled(true);
           range.setEnabled(true);
           
           median.setText("Cannot be Computed ");
           range.setText("Cannot be Computed");
        }

        if(!mm.isSelected() && !mmm.isSelected() && mmmm.isSelected() && !mmmmm.isSelected()){
            ArrayList<Integer> modes = modey.modeGroup(frequency);
            mode.setEnabled(true);
            modess.setEnabled(true);
            if (modes.size() == 1){
                mode.setText("unimodal");
            }else if (modes.size() == 2){
                System.out.println("bimodal");
            }else if (modes.size() >= 3){
                mode.setText("multimodal");
            }else {
                mode.setText("No mode");
            }
            for (int i = 0; i < modes.size(); i++){
                modess.append( lower.get(modes.get(i)) + "-" + upper.get(modes.get(i)) + "\n");
            }
        }  

        if(!mm.isSelected() && !mmm.isSelected() && !mmmm.isSelected() && mmmmm.isSelected()){
           
           mean.setEnabled(true);
           variance.setEnabled(true);
           standarddev.setEnabled(true);
           mean.setText(meany.meanGrouped(FX, frequency)+"");
           variance.setText(meany.gVar(frequency, FX, FX2)+"");
           standarddev.setText(meany.gStandardDev(frequency, FX, FX2)+"");
           
           median.setEnabled(true);
           range.setEnabled(true);
           median.setText("Cannot be Computed ");
           range.setText("Cannot be Computed");
           
            ArrayList<Integer> modes = modey.modeGroup(frequency);
            mode.setEnabled(true);
            modess.setEnabled(true);
            if (modes.size() == 1){
                mode.setText("unimodal");
            }else if (modes.size() == 2){
                System.out.println("bimodal");
            }else if (modes.size() >= 3){
                mode.setText("multimodal");
            }else {
                mode.setText("No mode");
            }
            for (int i = 0; i < modes.size(); i++){
                modess.append( lower.get(modes.get(i)) + "-" + upper.get(modes.get(i)) + "\n");
            }
        }
        
    } else {
       
       if(mm.isSelected() && !mmm.isSelected() && !mmmm.isSelected() && !mmmmm.isSelected()){
           
           mean.setEnabled(true);
           variance.setEnabled(true);
           standarddev.setEnabled(true);
           mean.setText("Cannot be Computed");
           variance.setText("Cennot be Computed");
           standarddev.setText("Cennot be Computed");
           
        }
     
        if(!mm.isSelected() && mmm.isSelected() && !mmmm.isSelected() && !mmmmm.isSelected()){
           median.setEnabled(true);
           range.setEnabled(true);
           
           median.setText("Cannot be Computed ");
           range.setText("Cannot be Computed");
        }

        if(!mm.isSelected() && !mmm.isSelected() && mmmm.isSelected() && !mmmmm.isSelected()){
            ArrayList<Integer> modes = modey.modeGroup(frequency);
            mode.setEnabled(true);
            modess.setEnabled(true);
            if (modes.size() == 1){
                mode.setText("unimodal");
            }else if (modes.size() == 2){
                System.out.println("bimodal");
            }else if (modes.size() >= 3){
                mode.setText("multimodal");
            }else {
                mode.setText("No mode");
            }
            for (int i = 0; i < modes.size(); i++){
                modess.append( lower.get(modes.get(i)) + "-" + upper.get(modes.get(i)) + "\n");
            }
        }  

        if(!mm.isSelected() && !mmm.isSelected() && !mmmm.isSelected() && mmmmm.isSelected()){
           
           mean.setEnabled(true);
           variance.setEnabled(true);
           standarddev.setEnabled(true);
           mean.setText("Cannot be Computed");
           variance.setText("Cennot be Computed");
           standarddev.setText("Cennot be Computed");
           
           median.setEnabled(true);
           range.setEnabled(true);
           median.setText("Cannot be Computed ");
           range.setText("Cannot be Computed");
           
            ArrayList<Integer> modes = modey.modeGroup(frequency);
            mode.setEnabled(true);
            modess.setEnabled(true);
            if (modes.size() == 1){
                mode.setText("unimodal");
            }else if (modes.size() == 2){
                System.out.println("bimodal");
            }else if (modes.size() >= 3){
                mode.setText("multimodal");
            }else {
                mode.setText("No mode");
            }
            for (int i = 0; i < modes.size(); i++){
                modess.append( lower.get(modes.get(i)) + "-" + upper.get(modes.get(i)) + "\n");
            }
        }
    
    
    }
    
    
      
    }//GEN-LAST:event_okActionPerformed

    private void freqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freqActionPerformed
      try{ 
         int z = Integer.valueOf(freq.getText()); 
         indi = false;
      } catch(Exception e){ 
      }
          if(!indi){
                try{
                 int z = Integer.parseInt(freq.getText());  
                 frequency.add(z);
                 freq.setText("");
                } catch (Exception e){

                }
            } 
          
            if (indi) {
               Double n =  Double.parseDouble(freq.getText());
               frequency.add(n);
               freq.setText("");
            }
          
      System.out.print(frequency);
      
      if(frequency.size() == size){
       
       freq.setEnabled(false);
       intervals.setEnabled(true);
       okk.setEnabled(true);
      }

    }//GEN-LAST:event_freqActionPerformed

    private void titleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleActionPerformed
        titlefn = title.getText();
        Size.setEnabled(true);
        ok1.setEnabled(true);
        choice.setEnabled(true);
    }//GEN-LAST:event_titleActionPerformed

    private void mmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mmActionPerformed

    private void ucActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ucActionPerformed
       Size.setEnabled(false);
       ok1.setEnabled(false);
       choice.setEnabled(false);
        
        
         try{ 
         int z = Integer.valueOf(uc.getText()); 
         indi = false;
      } catch(Exception e){ 
      }
          if(!indi){
                try{
                 int z = Integer.parseInt(uc.getText());  
                 upper.add(z);
                 uc.setText("");
                } catch (Exception e){

                }
            } 
          
            if (indi) {
               Double n =  Double.parseDouble(uc.getText());
               upper.add(n);
               uc.setText("");
            }
          
      System.out.print(upper);
      
      if(upper.size() == size){
        lc.setEnabled(true);
        uc.setEnabled(false);
       
      }
    }//GEN-LAST:event_ucActionPerformed

    private void lcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lcActionPerformed
     try{ 
         int z = Integer.valueOf(lc.getText()); 
         indi = false;
      } catch(Exception e){ 
      }
          if(!indi){
                try{
                 int z = Integer.parseInt(lc.getText());  
                 lower.add(z);
                 lc.setText("");
                } catch (Exception e){

                }
            } 
          
            if (indi) {
               Double n =  Double.parseDouble(lc.getText());
               lower.add(n);
               lc.setText("");
            }
          
      System.out.print(lower);
      
      if(lower.size() == size){
        freq.setEnabled(true);
        lc.setEnabled(false);
       
      }
    }//GEN-LAST:event_lcActionPerformed

    private void ok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok1ActionPerformed
        title.setEnabled(false);
        size = Integer.parseInt(Size.getText());
        if(((String)choice.getSelectedItem()).equals("Integer")){
        type = 1;
        } else if(((String)choice.getSelectedItem()).equals("Floating")){
        type = 2;
        }
        if(size > 0){
        uc.setEnabled(true);
        }
    }//GEN-LAST:event_ok1ActionPerformed

    private void okkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okkActionPerformed
        intervals.setEnabled(false);
        okk.setEnabled(false);
        ok.setEnabled(true);  
        mm.setEnabled(true);
        mmm.setEnabled(true);
        mmmm.setEnabled(true);
        mmmmm.setEnabled(true);
        dd.setEnabled(true);
        edit.setEnabled(true);
        
        if(((String)intervals.getSelectedItem()).equals("None")){
            MD = md.getM(lower, upper);
            FX = md.getFX(frequency, MD);
            FX2 = md.getFX2(frequency, MD);
        } 
        
         if(((String)intervals.getSelectedItem()).equals("Lower Range")){
            
            MD = md.getM(lower, upper);
            FX = md.getFX(frequency, MD);
            FX2 = md.getFX2(frequency, MD);
            MD.set(0,"-");
            FX.set(0,"-");
            FX2.set(0,"-");
            lower.set(0,"<=");
        } 
         
      
          
        if(((String)intervals.getSelectedItem()).equals("Upper Range")){
            
            MD = md.getM(lower, upper);
            FX = md.getFX(frequency, MD);
            FX2 = md.getFX2(frequency, MD);
            MD.set(MD.size()-1,"-");
            FX.set(FX.size()-1,"-");
            FX2.set(FX2.size()-1,"-");
            upper.set(size-1,">=");
          }
           
           if(((String)intervals.getSelectedItem()).equals("Both")){
            
            MD = md.getM(lower, upper);
            FX = md.getFX(frequency, MD);
            FX2 = md.getFX2(frequency, MD);
            MD.set(0,"-");
            MD.set(MD.size()-1,"-");
            FX.set(0,"-");
            FX.set(FX.size()-1,"-");
            FX2.set(0,"-");
            FX2.set(FX2.size()-1,"-");
            lower.set(0,"<=");
            upper.set(size-1,">=");

         } 
 


        
    }//GEN-LAST:event_okkActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
       String[] choices = { "Lower CL", "Upper CL", "Frequency"};
       String input = (String) JOptionPane.showInputDialog(null, "Change this Column:",
        "", JOptionPane.QUESTION_MESSAGE, null, choices, choices[1]); // Initial choice
        Integer index = Integer.parseInt(JOptionPane.showInputDialog("Index", null));
        Double newVal = Double.parseDouble(JOptionPane.showInputDialog("New Value", null));
        
        if(input.equals("Lower CL")){
          lower.set(index-1,newVal);
        }
        
        if(input.equals("Upper CL")){
          upper.set(index-1,newVal);
        }
        
        if(input.equals("Frequency")){
          upper.set(index-1,newVal);
        }
    }//GEN-LAST:event_editActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(grouped.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(grouped.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(grouped.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(grouped.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new grouped().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Size;
    private javax.swing.JButton back;
    private javax.swing.JComboBox<String> choice;
    private javax.swing.JButton dd;
    private javax.swing.JButton edit;
    private javax.swing.JTextField freq;
    private javax.swing.JComboBox<String> intervals;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lc;
    private javax.swing.JTextField mean;
    private javax.swing.JTextField median;
    private javax.swing.JCheckBox mm;
    private javax.swing.JCheckBox mmm;
    private javax.swing.JCheckBox mmmm;
    private javax.swing.JCheckBox mmmmm;
    private javax.swing.JTextField mode;
    private javax.swing.JTextArea modess;
    private javax.swing.JButton ok;
    private javax.swing.JButton ok1;
    private javax.swing.JButton okk;
    private javax.swing.JTextField range;
    private javax.swing.JTextField standarddev;
    private javax.swing.JTextField title;
    private javax.swing.JTextField uc;
    private javax.swing.JTextField variance;
    // End of variables declaration//GEN-END:variables
}
